#!/bin/bash
set -eo pipefail
shopt -s nullglob

# --------------------------------------------------
# Logging Functions
# --------------------------------------------------
log_msg() {
    local level="$1"; shift
    local message="${*:-$(cat)}"
    local dt
    dt=$(date --rfc-3339=seconds)
    printf '%s [%s] [Entrypoint]: %s\n' "$dt" "$level" "$message"
}

note() { log_msg "Note" "$@"; }
warn() { log_msg "Warn" "$@" >&2; }
error() { log_msg "ERROR" "$@" >&2; exit 1; }

# --------------------------------------------------
# Environment Variable from File
# --------------------------------------------------
file_env() {
    local var="$1"
    local fileVar="${var}_FILE"
    local default="${2:-}"
    if [ -n "${!var:-}" ] && [ -n "${!fileVar:-}" ]; then
        error "Both $var and $fileVar are set (but are exclusive)"
    fi

    local val="$default"
    if [ -n "${!var:-}" ]; then
        val="${!var}"
    elif [ -n "${!fileVar:-}" ]; then
        val="$(< "${!fileVar}")"
    fi
    export "$var"="$val"
    unset "$fileVar"
}

# --------------------------------------------------
# Check if script is sourced
# --------------------------------------------------
_is_sourced() {
    [ "${#FUNCNAME[@]}" -ge 2 ] && [ "${FUNCNAME[0]}" = "_is_sourced" ] && [ "${FUNCNAME[1]}" = "source" ]
}

# --------------------------------------------------
# Process Initialization Files
# --------------------------------------------------
docker_process_init_files() {
    echo
    local f
    for f; do
        case "$f" in
            *.sh)
                if [ -x "$f" ]; then
                    note "$0: running $f"
                    "$f"
                else
                    note "$0: sourcing $f"
                    . "$f"
                fi
                ;;
            *.sql)
                note "$0: running $f"
                docker_process_sql < "$f"
                echo
                ;;
            *.sql.bz2)
                note "$0: running $f"
                bunzip2 -c "$f" | docker_process_sql
                echo
                ;;
            *.sql.gz)
                note "$0: running $f"
                gunzip -c "$f" | docker_process_sql
                echo
                ;;
            *.sql.xz)
                note "$0: running $f"
                xzcat "$f" | docker_process_sql
                echo
                ;;
            *.sql.zst)
                note "$0: running $f"
                zstd -dc "$f" | docker_process_sql
                echo
                ;;
            *)
                warn "$0: ignoring $f"
                ;;
        esac
        echo
    done
}

# --------------------------------------------------
# Helper for MySQL command options
# --------------------------------------------------
_verboseHelpArgs=(
    --verbose --help
    --log-bin-index="$(mktemp -u)"
)

mysql_check_config() {
    local args=("$@" "${_verboseHelpArgs[@]}")
    if ! output=$("${args[@]}" 2>&1 >/dev/null); then
        error "mysqld failed while attempting to check config
    Command was: ${args[*]}
    Error: $output"
    fi
}

mysql_get_config() {
    local key="$1"; shift
    "$@" "${_verboseHelpArgs[@]}" 2>/dev/null \
        | awk -v key="$key" '$1 == key && /^[^ \t]/ { sub(/^[^ \t]+[ \t]+/, ""); print; exit }'
}

# --------------------------------------------------
# Socket Fix: Link default socket to expected socket
# --------------------------------------------------
mysql_socket_fix() {
    local defaultSocket
    defaultSocket=$(mysql_get_config 'socket' mysqld --no-defaults)
    if [ "$defaultSocket" != "$SOCKET" ]; then
        ln -sfTv "$SOCKET" "$defaultSocket" || :
    fi
}

# --------------------------------------------------
# Temporary Server Control
# --------------------------------------------------
docker_temp_server_start() {
    if ! "$@" --daemonize --skip-networking --default-time-zone=SYSTEM --socket="${SOCKET}"; then
        error "Unable to start server."
    fi
}

docker_temp_server_stop() {
    if ! mysqladmin --defaults-extra-file=<( _mysql_passfile ) shutdown -uroot --socket="${SOCKET}"; then
        error "Unable to shut down server."
    fi
}

# --------------------------------------------------
# Environment Verification for Passwords
# --------------------------------------------------
docker_verify_minimum_env() {
    if [ -z "$MYSQL_ROOT_PASSWORD" ] && [ -z "$MYSQL_ALLOW_EMPTY_PASSWORD" ] && [ -z "$MYSQL_RANDOM_ROOT_PASSWORD" ]; then
        error "Database is uninitialized and password option is not specified.
You need to specify one of:
- MYSQL_ROOT_PASSWORD
- MYSQL_ALLOW_EMPTY_PASSWORD
- MYSQL_RANDOM_ROOT_PASSWORD"
    fi

    if [ "$MYSQL_USER" = "root" ]; then
        error "MYSQL_USER cannot be 'root'. Remove MYSQL_USER=\"root\" and use:
- MYSQL_ROOT_PASSWORD
- MYSQL_ALLOW_EMPTY_PASSWORD
- MYSQL_RANDOM_ROOT_PASSWORD"
    fi

    if [ -n "$MYSQL_USER" ] && [ -z "$MYSQL_PASSWORD" ]; then
        warn "MYSQL_USER specified, but MYSQL_PASSWORD is missing; MYSQL_USER will not be created."
    elif [ -z "$MYSQL_USER" ] && [ -n "$MYSQL_PASSWORD" ]; then
        warn "MYSQL_PASSWORD specified, but MYSQL_USER is missing; MYSQL_PASSWORD will be ignored."
    fi
}

# --------------------------------------------------
# Create Database Directories and Set Permissions
# --------------------------------------------------
docker_create_db_directories() {
    local current_user; current_user=$(id -u)
    declare -A dirs
    dirs["$DATADIR"]=1
    local socket_dir
    socket_dir=$(dirname "$SOCKET")
    dirs["$socket_dir"]=1

    for key in general-log-file keyring_file_data pid-file secure-file-priv slow-query-log-file; do
        local conf_path
        conf_path=$(mysql_get_config "$key" "$@")
        if [ -n "$conf_path" ] && [ "$conf_path" != "NULL" ]; then
            case "$key" in
                secure-file-priv)
                    # Already a directory.
                    ;;
                *)
                    conf_path=$(dirname "$conf_path")
                    ;;
            esac
            dirs["$conf_path"]=1
        fi
    done

    mkdir -p "${!dirs[@]}"

    if [ "$current_user" -eq 0 ]; then
        find "${!dirs[@]}" \! -user mysql -exec chown --no-dereference mysql '{}' +
    fi
}

# --------------------------------------------------
# Initialize Database Directory
# --------------------------------------------------
docker_init_database_dir() {
    note "Initializing database files"
    "$@" --initialize-insecure --default-time-zone=SYSTEM --autocommit=1
    note "Database files initialized"
}

# --------------------------------------------------
# Setup Environment Variables
# --------------------------------------------------
docker_setup_env() {
    # Retrieve configuration values
    declare -g DATADIR SOCKET
    DATADIR=$(mysql_get_config 'datadir' "$@")
    SOCKET=$(mysql_get_config 'socket' "$@")

    # Load environment variables (or from file)
    file_env 'MYSQL_ROOT_HOST' '%'
    file_env 'MYSQL_DATABASE'
    file_env 'MYSQL_USER'
    file_env 'MYSQL_PASSWORD'
    file_env 'MYSQL_ROOT_PASSWORD'

    # Mark if the database already exists
    declare -g DATABASE_ALREADY_EXISTS
    if [ -d "$DATADIR/mysql" ]; then
        DATABASE_ALREADY_EXISTS='true'
    fi
}

# --------------------------------------------------
# Execute SQL Script from Stdin
# --------------------------------------------------
docker_process_sql() {
    local dontUseRoot=()
    if [ "$1" = "--dont-use-mysql-root-password" ]; then
        dontUseRoot+=( "$1" )
        shift
    fi

    # If MYSQL_DATABASE is set, force its usage.
    if [ -n "$MYSQL_DATABASE" ]; then
        set -- --database="$MYSQL_DATABASE" "$@"
    fi

    mysql --defaults-extra-file=<( _mysql_passfile "${dontUseRoot[@]}" ) --protocol=socket -uroot -hlocalhost --socket="${SOCKET}" --comments "$@"
}

# --------------------------------------------------
# Setup Database (timezone, root password, user creation)
# --------------------------------------------------
docker_setup_db() {
    # Import timezone info if not skipped.
    if [ -z "$MYSQL_INITDB_SKIP_TZINFO" ]; then
        mysql_tzinfo_to_sql /usr/share/zoneinfo \
            | sed 's/Local time zone must be set--see zic manual page/FCTY/' \
            | docker_process_sql --dont-use-mysql-root-password --database=mysql
    fi

    # Generate random root password if requested.
    if [ -n "$MYSQL_RANDOM_ROOT_PASSWORD" ]; then
        MYSQL_ROOT_PASSWORD=$(openssl rand -base64 24)
        export MYSQL_ROOT_PASSWORD
        note "GENERATED ROOT PASSWORD: $MYSQL_ROOT_PASSWORD"
    fi

    # Prepare SQL to create root user for non-localhost if needed.
    local rootCreate=""
    if [ -n "$MYSQL_ROOT_HOST" ] && [ "$MYSQL_ROOT_HOST" != "localhost" ]; then
        read -r -d '' rootCreate <<-EOSQL || true
			CREATE USER 'root'@'${MYSQL_ROOT_HOST}' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';
			GRANT ALL ON *.* TO 'root'@'${MYSQL_ROOT_HOST}' WITH GRANT OPTION;
EOSQL
    fi

    local passwordSet=""
    read -r -d '' passwordSet <<-EOSQL || true
		ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';
EOSQL

    docker_process_sql --dont-use-mysql-root-password --database=mysql <<-EOSQL
		SET autocommit = 1;
		SET @@SESSION.SQL_LOG_BIN=0;
		${passwordSet}
		GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION;
		FLUSH PRIVILEGES;
		${rootCreate}
		DROP DATABASE IF EXISTS test;
EOSQL

    if [ -n "$MYSQL_DATABASE" ]; then
        note "Creating database ${MYSQL_DATABASE}"
        docker_process_sql --database=mysql <<<"CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\`;"
    fi

    if [ -n "$MYSQL_USER" ] && [ -n "$MYSQL_PASSWORD" ]; then
        note "Creating user ${MYSQL_USER}"
        docker_process_sql --database=mysql <<<"CREATE USER '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';"

        if [ -n "$MYSQL_DATABASE" ]; then
            note "Granting user ${MYSQL_USER} access to schema ${MYSQL_DATABASE}"
            docker_process_sql --database=mysql <<<"GRANT ALL ON \`${MYSQL_DATABASE//_/\\_}\`.* TO '$MYSQL_USER'@'%';"
        fi
    fi
}

# --------------------------------------------------
# Generate Temporary Password File for MySQL Client
# --------------------------------------------------
_mysql_passfile() {
    if [ "$1" != "--dont-use-mysql-root-password" ] && [ -n "$MYSQL_ROOT_PASSWORD" ]; then
        cat <<-EOF
			[client]
			password="${MYSQL_ROOT_PASSWORD}"
EOF
    fi
}

# --------------------------------------------------
# Expire Root Password if One-Time is Enabled
# --------------------------------------------------
mysql_expire_root_user() {
    if [ -n "$MYSQL_ONETIME_PASSWORD" ]; then
        docker_process_sql --database=mysql <<-EOSQL
			ALTER USER 'root'@'%' PASSWORD EXPIRE;
EOSQL
    fi
}

# --------------------------------------------------
# Check if Help Option is Passed
# --------------------------------------------------
_mysql_want_help() {
    for arg; do
        case "$arg" in
            -\? | --help | --print-defaults | -V | --version)
                return 0
                ;;
        esac
    done
    return 1
}

# --------------------------------------------------
# Main Entrypoint Function
# --------------------------------------------------
_main() {
    # Prepend 'mysqld' if the first argument is an option.
    if [[ "${1:0:1}" == "-" ]]; then
        set -- mysqld "$@"
    fi

    if [ "$1" = "mysqld" ] && ! _mysql_want_help "$@"; then
        note "Entrypoint script for MySQL Server ${MYSQL_VERSION} started."

        mysql_check_config "$@"
        docker_setup_env "$@"
        docker_create_db_directories "$@"

        if [ "$(id -u)" = "0" ]; then
            note "Switching to dedicated user 'mysql'"
            exec gosu mysql "$BASH_SOURCE" "$@"
        fi

        if [ -z "$DATABASE_ALREADY_EXISTS" ]; then
            docker_verify_minimum_env

            ls /docker-entrypoint-initdb.d/ > /dev/null || true

            docker_init_database_dir "$@"
            note "Starting temporary server"
            docker_temp_server_start "$@"
            note "Temporary server started."

            mysql_socket_fix
            docker_setup_db
            docker_process_init_files /docker-entrypoint-initdb.d/*

            mysql_expire_root_user

            note "Stopping temporary server"
            docker_temp_server_stop
            note "Temporary server stopped"
            echo
            note "MySQL init process done. Ready for start up."
            echo
        else
            mysql_socket_fix
        fi
    fi

    exec "$@"
}

# --------------------------------------------------
# Execute _main if not sourced
# --------------------------------------------------
if ! _is_sourced; then
    _main "$@"
fi
